pipeline {
  agent none
  options {
     timeout(time: 1, unit: 'HOURS')
  }
  parameters {
    booleanParam(name: 'UNITTEST', defaultValue: true, description: 'Enable UnitTests ?')
    booleanParam(name: 'CODEANALYSIS', defaultValue: true, description: 'Enable CODE-ANALYSIS ?')
    string(name: 'ECRURL', defaultValue: '052807230865.dkr.ecr.ap-south-1.amazonaws.com', description: 'Please Enter your Docker ECR REGISTRY URL without https?')
    string(name: 'BASEREPO', defaultValue: 'imgbaseimage', description: 'Please Enter your Docker Base Repo Name?')
    string(name: 'APPREPO', defaultValue: 'webapp', description: 'Please Enter your Docker App Repo Name?')
    string(name: 'REGION', defaultValue: 'ap-south-1', description: 'Please Enter your AWS Region?')
    password(name: 'PASSWD', defaultValue: '', description: 'Please Enter your Gitlab password')
   }
 stages {
  stage('Checkout')
  {
    agent { label 'demo' }
    steps { 
     git credentialsId: 'GitlabCred', url: 'https://github.com/varuntadimarri1/DevOps.git'
    }
  }

  stage('PreCheck')
  {
   agent { label 'demo' }
   when { 
     anyOf {
           changeset "samplejar/**"
           changeset "samplewar/**"
     }
   }
   steps {
       script {
          env.BUILDME = "yes" // Set env variable to enable further Build Stages
       }
   }
  }
  stage('Build')
  {
    when {environment name: 'BUILDME', value: 'yes'}
    agent { label 'demo' }
    steps { 
        script {
	    if (params.UNITTEST) {
		  unitstr = ""
	    } else {
		  unitstr = "-Dmaven.test.skip=true"
	    }
	
            echo "Building Jar Component ..."
	    dir ("./samplejar") {
	      sh "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64; mvn clean package ${unitstr}"
	    }

            echo "Building War Component ..."
	    dir ("./samplewar") {
             sh "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64; mvn clean package "
	    }
	 }
    }
   }
  stage('Code Coverage')
  {
   agent { label 'demo' }
   when {
     allOf {
         expression { return params.CODEANALYSIS }
         environment name: 'BUILDME', value: 'yes'
     }
   }
   steps {
     echo "Running Code Coverage ..."  
     dir ("./samplejar") {
	sh "mvn org.jacoco:jacoco-maven-plugin:0.5.5.201112152213:prepare-agent"
     }
   }
  }

  stage('SonarQube Analysis') 
  {
    agent { label 'demo' }
    when {environment name: 'BUILDME', value: 'yes'}
    steps{
     withSonarQubeEnv('demosonarqube') {
	  dir ("./samplejar") {
             sh 'mvn sonar:sonar'
	  }
     } 
    }
  }
   stage("Quality Gate"){ 
    when {environment name: 'BUILDME', value: 'yes'}
    steps{
	 script {
	   timeout(time: 10, unit: 'MINUTES') { 
            def qg = waitForQualityGate() 
            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
           }
	 }
     }
   }

  stage('Stage Artifacts') 
  {          
   agent { label 'demo' }
   when {environment name: 'BUILDME', value: 'yes'}
   steps {          
    script { 
	    /* Define the Artifactory Server details */
        def server = Artifactory.server 'defaultjfrog'
        def uploadSpec = """{
            "files": [{
            "pattern": "samplewar/target/samplewar.war", 
            "target": "DEMOCI"                   
            }]
        }"""
        
        /* Upload the war to  Artifactory repo */
        server.upload(uploadSpec)
    }
   }
  }

  stage('Build Image') 
  {
    agent { label 'demo' }
    steps{
      script {
	  // Prepare the Tag name for the Image
	  AppTag = params.APPREPO + ":" + env.BUILD_ID
          BaseTag = params.ECRURL + "/" + params.BASEREPO
          // Docker login needs https appended 
	  ECR = "https://" + params.ECRURL
          docker.withRegistry( ECR, 'ecr:ap-south-1:AWSCred' ) {
             /* Build Docker Image locally */
             myImage = docker.build(AppTag, "--build-arg BASEIMAGE=${BaseTag} .")
             /* Push the Image to the Registry */
             myImage.push()
          }
      }
    }
  }

  stage ('Scan Image')
  {
    agent { label 'demo' }
	steps {
	  withAWS(credentials:'AWSCred') {
	   sh "chmod +x getimagescan.sh; ./getimagescan.sh ${params.APPREPO} ${env.BUILD_ID} ${params.REGION}"
	  }
	}
  }

   stage ('Deploy'){
    agent {label 'demo'}
    when {environment name: 'BUILDME', value: 'yes'}
    steps {
      script {
        env.DEPLOYIMAGE = params.APPREPO + ":" + env.BUILD_ID
        // Create Containers using the recent Build Image
        sh ("export DEPLOYIMAGE=${DEPLOYIMAGE}; docker-compose up -d")
      }          
   }

 stage ('Smoke Test'){
    agent {label 'demo'}
    when {environment name: 'BUILDME', value: 'yes'}
    steps {
      catchError(buildResult: 'SUCCESS', message: 'TEST-CASES FAILED', stageResult: 'UNSTABLE')
      {
         sh "sleep 10; chmod +x runsmokes.sh; ./runsmokes.sh"
      }
    }
     post {
     always {
      script {
        env.DEPLOYIMAGE = params.APPREPO + ":" + env.BUILD_ID
        // Create Containers using the recent Build Image
        sh ("export DEPLOYIMAGE=${DEPLOYIMAGE}; docker-compose down")
        sh ("docker rmi ${params.APPREPO}:${env.BUILD_ID}")
       }   
    }
  }
  }

  stage ('Trigger CD'){
    agent {label 'demo'}
    when {environment name: 'BUILDME', value: 'yes'}
    steps {
	   script {
	     TAG = '\\/' + params.APPREPO + ":" + env.BUILD_ID
		 build job: 'DeployBuild', parameters: [string(name: 'IMAGE', value: TAG), password(name: 'PASSWD', value: params.PASSWD)]
       }
    }
  }

 }
}
